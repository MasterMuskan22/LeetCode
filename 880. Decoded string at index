/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    string decodeAtIndex(string s, int k) {
        //Gives TLE
        // string res="";
        // int i=0;
        // while(sz(res)<k && i<sz(s)){
        //     if(isdigit(s[i])){
        //         int x=s[i]-'0';
        //         x--;
        //         string temp=res;
        //         while(x--){
        //             for(auto it:temp) res+=it;
        //         }
        //     }
        //     else res+=s[i];
        //     i++;
        // }
        // string ans="";
        // ans+=res[k-1];
        // return ans;
        //Better way is to find the length of the decoded string and then 
        //traverse through the back and find the point where our K satisfies
        ll len=0;
        for(auto it:s){
            if(isalpha(it)) len++;
            else len*=(it-'0');
        }
        for(int i=sz(s)-1;i>=0;i--){
            k%=len;
            if(k==0){
                if(isalpha(s[i])) return string(1,s[i]);
            }
            if(isalpha(s[i])) len--;
            else len/=(s[i]-'0');
        }
        rt("");
    }
};
