/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    vector<string> getWordsInLongestSubsequence(int n, vector<string>& words, vector<int>& groups) {
        vii v;
        rep(i,0,sz(groups)){
            int j=i+1;
            int prev=groups[i];
            vi temp;
            temp.pb(i);
            while(j<sz(groups)){
                if(groups[j]!=prev) temp.pb(j),prev=groups[j];
                j++;
            }
            v.pb(temp);
        }
        vs res;
        // int maxi=0;
        int prev=-1;
        string s="";
        vs ans;
        for(auto it:v){
            string x="";
            rep(i,0,sz(it)){
                x+=words[it[i]];
            }
            // cout<<x<<endl;
            if(sz(x)>sz(s)) s=x;
        }
        rep(i,0,sz(groups)){
            if(groups[i]!=prev){
                prev=groups[i];
                ans.pb(words[i]);
            }
        }
        for(auto it:s){
            string a(1,it);
            res.pb(a);
        }
        rt(ans);
    }
};
