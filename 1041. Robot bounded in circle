/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    bool isRobotBounded(string s) {
        int x=0,y=0;
        char dir='N';
        for(auto it:s){
            //If the direction is 'G'
            if(it=='G'){
                if(dir=='N') y+=1;
                else if(dir=='S') y-=1;
                else if(dir=='E') x+=1;
                else if(dir=='W') x-=1;
            }
            else{
                //Now change the directions
                if(it=='L'){
                    if(dir=='N') dir='W';
                    else if(dir=='S') dir='E';
                    else if(dir=='E') dir='N';
                    else if(dir=='W') dir='S';
                }
                else if(it=='R'){
                    if(dir=='N') dir='E';
                    else if(dir=='S') dir='W';
                    else if(dir=='E') dir='S';
                    else if(dir=='W') dir='N';
                }
            }
        }
        if((x==0 && y==0) || (dir!='N')) rt(1);
        rt(0);
    }
};
