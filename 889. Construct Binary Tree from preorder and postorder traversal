/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    TreeNode* getTree(int preStart,int preEnd,vi &preOrder,int postStart,int postEnd,vi &postOrder,umap &mp){
        TreeNode* root=new TreeNode(preOrder[preStart]);
        if(preStart>=preEnd || postStart>=postEnd) return root;
        int ind=mp[preOrder[preStart+1]];
        int rem=ind-postStart+1;
        root->left=getTree(preStart+1,preStart+rem,preOrder,postStart,postStart+rem-1,postOrder,mp);
        if(ind+1>=postEnd) rt(root);
        root->right=getTree(preStart+rem+1,preEnd,preOrder,ind+1,postEnd-1,postOrder,mp);
        rt(root);
    }
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        umap mp;
        rep(i,0,sz(postorder)) mp[postorder[i]]=i;
        return getTree(0,sz(preorder)-1,preorder,0,sz(postorder)-1,postorder,mp);
    }
};
