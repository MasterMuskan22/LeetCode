/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class Solution {
public:
    int getDis(int i,int j,string &s,string &t,vii &dp){
        if(i>=sz(s)) rt(sz(t)-j);
        if(j>=sz(t)) rt(sz(s)-i);
        if(dp[i][j]!=-1) rt(dp[i][j]);
        if(s[i]==t[j]) return dp[i][j]=getDis(i+1,j+1,s,t,dp);
        else return dp[i][j]=1+min(getDis(i+1,j,s,t,dp),min(getDis(i+1,j+1,s,t,dp),getDis(i,j+1,s,t,dp)));
    }
    int minDistance(string word1, string word2) {
        int m=sz(word1);
        int n=sz(word2);
        // vii dp(m,vi(n,-1));
        // return getDis(0,0,word1,word2,dp);
        // vii dp(m+1,vi(n+1,0));
        // //If the 1st string is empty then the only option is to insert all the characters
        // //of the 2nd string
        // rep(i,0,m+1) dp[i][0]=i;
        // //If the 2nd string is empty then the only option is to delete all the characters of
        // //the first string
        // rep(j,0,n+1) dp[0][j]=j;
        // rep(i,1,m+1){
        //     rep(j,1,n+1){
        //         if(word1[i-1]==word2[j-1]) dp[i][j]=dp[i-1][j-1];
        //         else dp[i][j]=1+min(dp[i-1][j-1],min(dp[i][j-1],dp[i-1][j]));
        //     }
        // }
        // rt(dp[m][n]);
        vi prev(n+1,0);
        vi cur(n+1,0);
        rep(j,0,n+1) prev[j]=j;
        rep(i,1,m+1){
            cur[0]=i;
            rep(j,1,n+1){
                if(word1[i-1]==word2[j-1]) cur[j]=prev[j-1];
                else cur[j]=1+min({prev[j-1],cur[j-1],prev[j]});
            }
            prev=cur;
        }
        rt(prev[n]);
    }
};
