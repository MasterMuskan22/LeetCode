/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*The ways to success lies in hardwork,consistency,dedication,gratitude and all 
that with a sweet smile on the face.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        //TC = O(log2N)
        //If the root is NULL then just return the val as TreeNode
        if(!root) return new TreeNode(val);
        TreeNode* temp=root;
        //If the value of root is lesser it means that the val has to be present in the
        //right part so go right and stop where the right becomes NULL and add the 
        //new node at that leaf and same procedure on left if root->val>val
        while(1){
            if(temp->val>val){
                if(temp->left) temp=temp->left;
                else{
                    temp->left=new TreeNode(val);
                    break;
                }
            }
            else{
                if(temp->right) temp=temp->right;
                else{
                    temp->right=new TreeNode(val);
                    break;
                }
            }
        }
        rt(root);
    }
};
