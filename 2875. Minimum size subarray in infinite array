/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int minSizeSubarray(vector<int>& nums, int target) {
        ll tot_sum=0;
        int n=sz(nums);
        for(auto it:nums) tot_sum+=it;
        int found_sum_len=(target/tot_sum)*n;
        int rem_sum=target%tot_sum;
        if(rem_sum==0) rt(found_sum_len);
        ll min_len=1e9;
        ll cur_sum=0;
        unordered_map<ll,ll> mp;
        rep(i,0,n) nums.pb(nums[i]);
        rep(i,0,2*n){
            cur_sum+=nums[i];
            if(mp.find(cur_sum-rem_sum)!=mp.end()){
                min_len=min(min_len,i-mp[cur_sum-rem_sum]);
            }
            mp[cur_sum]=i;
        }
        if(min_len==1e9) rt(-1);
        rt(min_len+found_sum_len);
    }
};
