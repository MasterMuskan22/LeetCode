/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int getMaxSum(int i,vi &arr,int k,vi &dp){
        if(i>=sz(arr)) rt(0);
        if(dp[i]!=-1) rt(dp[i]);
        int max_sum=-1e9;
        int len=0;
        int max_num=-1e9;
        int n=sz(arr);
        for(int j=i;j<min(i+k,n);j++){
            len++;
            max_num=max(max_num,arr[j]);
            max_sum=max(max_sum,len*max_num+getMaxSum(j+1,arr,k,dp));
        }
        rt(dp[i]=max_sum);
    }
    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        // vi dp(sz(arr),-1);
        // return getMaxSum(0,arr,k,dp);
        int n=sz(arr);
        vi dp(n+1,0);
        for(int i=n-1;i>=0;i--){
            int len=0;
            int max_sum=-1e9;
            int max_num=-1e9;
            for(int j=i;j<min(n,i+k);j++){
                max_num=max(max_num,arr[j]);
                len++;
                max_sum=max(max_sum,max_num*len+dp[j+1]);
            }
            dp[i]=max_sum;
        }
        rt(dp[0]);
    }
};
