/*The ways to success lies in hardwork,consistency,dedication,gratitude and all 
that with a sweet smile on the face.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class Solution {
public:
    static bool comp(string &a,string &b){
        return a.size()<b.size();
    }
    bool isValid(string &a,string &b){
        if(sz(a)!=sz(b)+1) rt(0);
        int i=0,j=0;
        while(i<sz(a)){
            if(j<sz(b) && a[i]==b[j]){
                i++,j++;
            }
            else i++;
        }
        if(i==sz(a) && j==sz(b)) rt(1);
        rt(0);
    }
    int longestStrChain(vector<string>& words) {
        int maxi=1;
        sort(words.begin(),words.end(),comp);
        vi dp(sz(words),1);
        rep(i,0,sz(words)){
            rep(j,0,i){
                string a=words[i];
                string b=words[j];
                if(isValid(a,b)){
                    dp[i]=max(dp[i],1+dp[j]);
                }
                maxi=max(maxi,dp[i]);
            }
        }
        rt(maxi);
    }
};
