/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class Solution {
public:
    int getSum(vi &arr,int sum){
        int subs=1;
        int cur=0;
        rep(i,0,sz(arr)){
            if(cur+arr[i]<=sum) cur+=arr[i];
            else{
                cur=arr[i];
                subs++;
            }
        }
        rt(subs);
    }
    int splitArray(vector<int>& nums, int k) {
        int n=sz(nums);
        //If the number of splits is greater than size of array then we can't split
        if(k>n) rt(0);
        //start will be the max elm of array as we need to store every element so if we 
        //want to store max then it will be fine
        int start=*max_element(nums.begin(),nums.end());
        int end=accumulate(nums.begin(),nums.end(),0);
        while(start<=end){
            int mid=start+(end-start)/2;
            int subcnt=getSum(nums,mid);
            if(subcnt>k) start=mid+1;
            else end=mid-1;
        }
        rt(start);
    }
};
