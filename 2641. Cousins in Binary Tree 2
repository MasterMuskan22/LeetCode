/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        if(!root) return NULL;
        root->val=0;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int n=q.size();
            int level_sum=0;
            vector<TreeNode*> v;
            for(int i=0;i<n;i++){
                auto it=q.front();
                q.pop();
                v.push_back(it);
                if(it->left){
                    q.push(it->left);
                    level_sum+=it->left->val;
                }
                if(it->right){
                    q.push(it->right);
                    level_sum+=it->right->val;
                }
            }
            for(auto it:v){
                int cur_sum=level_sum;
                if(it->left) cur_sum-=it->left->val;
                if(it->right) cur_sum-=it->right->val;
                if(it->left) it->left->val=cur_sum;
                if(it->right) it->right->val=cur_sum;
            }
        }
        return root;
    }
};
