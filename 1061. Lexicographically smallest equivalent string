#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int par[26];
    int findUltimateParent(int n){
        if(par[n]==-1) rt(n);
        return par[n]=findUltimateParent(par[n]);
    }
    void unionBySize(int n1,int n2){
        n1=findUltimateParent(n1);
        n2=findUltimateParent(n2);
        if(n1!=n2) par[max(n1,n2)]=min(n1,n2);
    }
    string smallestEquivalentString(string s1, string s2, string baseStr) {
        memset(par,-1,sizeof(par));
        rep(i,0,sz(s1)) unionBySize(s1[i]-'a',s2[i]-'a');
        rep(i,0,sz(baseStr)) baseStr[i]=findUltimateParent(baseStr[i]-'a')+'a';
        rt(baseStr);
    }
};
