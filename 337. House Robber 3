/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*The ways to success lies in hardwork,consistency,dedication,gratitude and all 
that with a sweet smile on the face.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class Solution {
public:
    vi getMax(TreeNode* &root){
        if(!root) return {0,0};
        vi left=getMax(root->left);
        vi right=getMax(root->right);
        //Take means we are taking the root, so we have to take the next ka next se value
        //that's why excluded value is taken
        //For notTake, if we are not taking the root then we can take any node from root 
        //ke next ka next.
        int take=root->val+left[1]+right[1];
        int notTake=max(left[0],left[1])+max(right[0],right[1]);
        return {take,notTake};
    }
    int rob(TreeNode* root) {
        //Level Order Traversal will not work here. Because:
        //See if we took the root then we can take the next ka next node but we can also 
        //take next ke next ka next node also. If the later is bigger than the former
        //then it is better to take the later, so in that case LOT will fail.
        //There comes DP on Trees
        //We can follow the approach of take,notTake on every node
        if(!root) rt(0);
        vi res=getMax(root);
        rt(max(res[0],res[1]));

        // int oddSum=0,evenSum=0;
        // if(!root) rt(0);
        // queue<TreeNode*> q;
        // q.push(root);
        // bool ch=0;
        // while(!q.empty()){
        //     int n=sz(q);
        //     int temp=0;
        //     rep(i,0,n){
        //         auto node=q.front();
        //         q.pop();
        //         temp+=node->val;
        //         if(node->left) q.push(node->left);
        //         if(node->right) q.push(node->right);
        //     }
        //     if(ch==0) evenSum+=temp;
        //     else oddSum+=temp;
        //     ch=!ch;
        // }
        // rt(max(oddSum,evenSum));
    }
};
