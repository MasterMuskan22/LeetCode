/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class Solution {
private:
    TreeNode* first;
    TreeNode* middle;
    TreeNode* last;
    TreeNode* prev;
private:
    void dfs(TreeNode* root){
        if(!root) return ;
        dfs(root->left);
        if(prev!=NULL && prev->val>root->val){
            if(first==NULL){
                first=prev;
                middle=root;
            }
            else{
                last=root;
            }
        }
        prev=root;
        dfs(root->right);
    }
public:
    // int i=0;
    // void dfs(TreeNode* root,vi &arr){
    //     if(!root) return ;
    //     dfs(root->left,arr);
    //     arr.pb(root->val);
    //     dfs(root->right,arr);
    // }
    // void getTree(TreeNode* &root,vi &arr){
    //     if(!root) return ;
    //     getTree(root->left,arr);
    //     if(arr[i]!=root->val){
    //         swap(arr[i],root->val);
    //     }
    //     i++;
    //     getTree(root->right,arr);
    // }
    void recoverTree(TreeNode* root) {
        //TC = O(N)+O(NlogN)+O(N)
        //SC = O(N)
        // vi arr;
        // dfs(root,arr);
        // srt(arr);
        // getTree(root,arr);
        prev=new TreeNode(INT_MIN);
        first=middle=last=NULL;
        dfs(root);
        if(first!=NULL && last!=NULL) swap(first->val,last->val);
        else if(first!=NULL && middle!=NULL) swap(first->val,middle->val);
    }
};
