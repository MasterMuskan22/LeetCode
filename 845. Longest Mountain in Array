/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int longestMountain(vector<int>& arr) {
        // int n=sz(arr);
        // vi pref(n,1);
        // vi suff(n,1);
        // int i=0,j=1;
        // while(j<sz(arr)){
        //     if(arr[j]>arr[j-1]){
        //         pref[j]=pref[j-1]+1;
        //         j++;
        //     }
        //     else{
        //         i=j;
        //         j++;
        //     }
        // }
        // i=n-1,j=n-2;
        // while(j>=0){
        //     if(arr[j]>arr[j+1]){
        //         suff[j]=1+suff[j+1];
        //         j--;
        //     }
        //     else{
        //         i=j;
        //         j--;
        //     }
        // }
        // int max_len=0;
        // rep(i,0,n){
        //     if(pref[i]>1 && suff[i]>1) max_len=max(max_len,pref[i]+suff[i]-1);
        // }
        // rt(max_len);

        int n=sz(arr);
        int max_len=0;
        rep(i,1,n-1){
            if(arr[i]>arr[i-1] && arr[i]>arr[i+1]){
                int start=i,end=i;
                while(start>0 && arr[start]>arr[start-1]) start--;
                while(end<n-1 && arr[end]>arr[end+1]) end++;
                max_len=max(max_len,end-start+1);
            }
        }
        rt(max_len);
    }
};
