/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int getMaxSum(int i,int prev,vi &nums,int k,vii &dp){
        if(i>=sz(nums)) rt(0);
        if(dp[i][prev]!=-1) rt(dp[i][prev]);
        int take=-1e9;
        int notTake=-1e9;
        notTake=max(notTake,getMaxSum(i+1,prev,nums,k,dp));
        if(i-prev<=k) take=max({take,nums[i]+getMaxSum(i+1,i,nums,k,dp),getMaxSum(i+1,prev,nums,k,dp)});
        return dp[i][prev]=max(take,notTake);
    }
    int constrainedSubsetSum(vector<int>& nums, int k) {
        int n=nums.size();
        vector<int>dp(n+10,0);
        multiset<int>st;
        int ans=-1e9;
        int ptr=0;
        for(int i=0;i<n;i++)
        {
            if(st.size()>0)
            {
                int prev=*st.rbegin();
                dp[i]=max(nums[i],nums[i]+prev);
                if(i-ptr>=k)
                {
                    st.erase(st.find(dp[ptr]));
                    ptr++;
                }
                st.insert(dp[i]);
            }
            else
            {
                dp[i]=nums[i];
                st.insert(dp[i]);
            }
            ans=max(ans,dp[i]);
        }
        return ans;
    }
};
