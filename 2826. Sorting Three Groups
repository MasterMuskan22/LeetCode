/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int getMinOps(int i,int prev,vi &nums,vii &dp){
        if(i>=sz(nums)) rt(0);
        if(dp[i][prev]!=-1) rt(dp[i][prev]);
        int res=1e9;
        rep(j,1,4){
            if(j>=prev) res=min(res,1+getMinOps(i+1,j,nums,dp));
        }
        if(nums[i]>=prev) res=min(res,getMinOps(i+1,nums[i],nums,dp));
        return dp[i][prev]=res;
    }
    int minimumOperations(vector<int>& nums) {
        int n=sz(nums);
        vii dp(n,vi(4,-1));
        return getMinOps(0,0,nums,dp);

        //LCS -> Think how LCS will work here.
        // int maxi=1;
        // vi dp(n,1);
        // rep(i,1,n){
        //     rep(j,0,i){
        //         if(nums[i]>=nums[j]){
        //             dp[i]=max(dp[i],1+dp[j]);
        //             maxi=max(maxi,dp[i]);
        //         }
        //     }
        // }
        // rt(n-maxi);
    }
};
