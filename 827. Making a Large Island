/*The ways to success lies in hardwork,consistency,dedication,gratitude and all 
that with a sweet smile on the face.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class DisJointSet{
public:
    vector<int> rank;
    vector<int> parent;
    vector<int> size;
    DisJointSet(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
            size[i]=1;
        }
    }
    int findUltimateParent(int node){
        if(node==parent[node]) return node;
        return parent[node]=findUltimateParent(parent[node]);
    }
    void unionByRank(int node1,int node2){
        int ultParentNode1=findUltimateParent(node1);
        int ultParentNode2=findUltimateParent(node2);
        if(ultParentNode1==ultParentNode2) return ;
        if(rank[ultParentNode1]>rank[ultParentNode2]){
            parent[ultParentNode2]=ultParentNode1;
        }
        else if(rank[ultParentNode1]<rank[ultParentNode2]){
            parent[ultParentNode1]=ultParentNode2;
        }
        else{
            parent[ultParentNode1]=ultParentNode2;
            rank[ultParentNode1]++;
        }
    }
    void unionBySize(int node1,int node2){
        int ultParentNode1=findUltimateParent(node1);
        int ultParentNode2=findUltimateParent(node2);
        if(ultParentNode1==ultParentNode2) return ;
        if(size[ultParentNode1]>size[ultParentNode2]){
            parent[ultParentNode2]=ultParentNode1;
            size[ultParentNode1]+=size[ultParentNode2];
        }
        else{
            parent[ultParentNode1]=ultParentNode2;
            size[ultParentNode2]+=size[ultParentNode1];
        }
    }
};
class Solution {
public:
    bool isValid(int i,int j,int n){
        if(i<0 || i>=n || j<0 || j>=n) rt(0);
        rt(1);
    }
    int largestIsland(vector<vector<int>>& grid) {
        int res=0;
        int n=sz(grid);
        DisJointSet ds(n*n);
        rep(i,0,n){
            rep(j,0,n){
                if(grid[i][j]==0) continue;
                int nodeNum=(i*n)+j;
                rep(a,0,4){
                    int nRow=i+dr[a];
                    int nCol=j+dc[a];
                    int adjNodeNum=(nRow*n)+nCol;
                    if(isValid(nRow,nCol,n) && grid[nRow][nCol]==1){
                        ds.unionBySize(nodeNum,adjNodeNum);
                    }
                }
            }
        }
        rep(i,0,n){
            rep(j,0,n){
                if(grid[i][j]==1) continue;
                set<int> st;
                rep(a,0,4){
                    int nRow=i+dr[a];
                    int nCol=j+dc[a];
                    if(isValid(nRow,nCol,n) && grid[nRow][nCol]==1){
                        int adjNodeNum=(nRow*n)+nCol;
                        int par=ds.findUltimateParent(adjNodeNum);
                        st.insert(par);
                    }
                }
                int sum=0;
                for(auto it:st){
                    sum+=ds.size[it];
                }
                res=max(res,sum+1);
            }
        }
        // rep(i,0,n*n){
        //     int par=ds.findUltimateParent(i);
        //     res=max(res,ds.size[i]);
        // }
        res=max(res,ds.size[ds.findUltimateParent(n*n-1)]);
        rt(res);
    }
};
