/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * class MountainArray {
 *   public:
 *     int get(int index);
 *     int length();
 * };
 */
/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int findInMountainArray(int target, MountainArray &mountainArr) {
        //Find the peak index in the array as the target element will lie on either side of
        //the peak index
        int start=0,end=mountainArr.length()-1;
        int peak=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(mountainArr.get(mid+1)>mountainArr.get(mid)) start=mid+1;
            else end=mid-1;
        }
        peak=start;
        //Apply BS on left side of peak and find the ans
        start=0,end=peak;
        int ind=1e9;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(mountainArr.get(mid)==target){
                ind=min(ind,mid);
            }
            if(mountainArr.get(mid)>=target) end=mid-1;
            else start=mid+1;
        }
        //Apply BS on right side to get the answer
        start=peak,end=mountainArr.length()-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(mountainArr.get(mid)==target){
                ind=min(ind,mid);
            }
            if(mountainArr.get(mid)>=target) start=mid+1;
            else end=mid-1;
        }
        return ind==1e9?-1:ind;
    }
};
