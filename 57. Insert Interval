/*The ways to success lies in hardwork,consistency,dedication,gratitude and all 
that with a sweet smile on the face.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        //There are two ways to solve
        //1st is to add the new interval in intervals and perform merging of them
        //TC = O(NlogN)+O(N)
        //SC = O(1)
        // intervals.push_back(newInterval);
        // srt(intervals);
        // vii res;
        // int start=intervals[0][0];
        // int end=intervals[0][1];
        // int i=1;
        // while(i<sz(intervals)){
        //     if(intervals[i][0]<=end){
        //         end=max(end,intervals[i][1]);
        //         i++;
        //     }
        //     else{
        //         res.push_back({start,end});
        //         start=intervals[i][0];
        //         end=intervals[i][1];
        //         i++;
        //     }
        // }
        // res.push_back({start,end});
        // rt(res);

        //2nd is that the array is already sorted. So just find the start and end in which
        //the new interval should be added and dont forget to merge the overlapping ones
        //TC = O(N)
        //SC = O(N)
        vii res;
        int i=0;
        int n=sz(intervals);
        while(i<n && intervals[i][1]<newInterval[0]){
            res.push_back(intervals[i]);
            i++;
        }
        while(i<n && intervals[i][0]<=newInterval[1]){
            newInterval[0]=min(newInterval[0],intervals[i][0]);
            newInterval[1]=max(newInterval[1],intervals[i][1]);
            i++;
        }
        res.push_back(newInterval);
        while(i<n){
            res.push_back(intervals[i]);
            i++;
        }
        rt(res);
    }
};
