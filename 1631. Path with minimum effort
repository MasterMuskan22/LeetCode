/*The ways to success lies in hardwork,consistency,dedication,gratitude and all 
that with a sweet smile on the face.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
#define pii pair<int,pi>
class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) { 
        //Take care of the small details of code like making dist of start as 0
        int m=sz(heights);
        int n=sz(heights[0]);
        vii dist(m,vi(n,1e9));
        dist[0][0]=0;
        priority_queue<pii,vector<pii>,greater<>> pq; // Minimum distance that's why pq
        pq.push({0,{0,0}});
        while(!pq.empty()){
            int effort=pq.top().first;
            int r=pq.top().second.first;
            int c=pq.top().second.second;
            pq.pop();
            rep(i,0,4){
                int nRow=r+dr[i];
                int nCol=c+dc[i];
                if(nRow>=0 && nRow<m && nCol>=0 && nCol<n){
                    int newEffort=max(abs(heights[nRow][nCol]-heights[r][c]),effort);
                    if(dist[nRow][nCol]>newEffort){
                        dist[nRow][nCol]=newEffort;
                        pq.push({newEffort,{nRow,nCol}});
                    }
                }
            }
        }
        rt(dist[m-1][n-1]);
    }
};
