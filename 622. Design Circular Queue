/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class MyCircularQueue {
public:
    vi arr;
    int i=0,j=-1;
    int n=0;
    MyCircularQueue(int k) {
        arr.resize(k,-1);
        n=k;
    }
    
    bool enQueue(int value) {
        //Enqueue is perfomed at back or rear place
        if(isFull()) rt(0);
        j=(j+1)%n;
        arr[j]=value;
        rt(1);
    }
    
    bool deQueue() {
        //Dequeue is performed at front place
        if(isEmpty()) rt(0);
        if(i==j){
            i=0,j=-1;
        }
        else{
            i=(i+1)%n;
        }
        rt(1);
    }
    
    int Front() {
        if(isEmpty()) rt(-1);
        rt(arr[i]);
    }
    
    int Rear() {
        if(isEmpty()) rt(-1);
        rt(arr[j]);
    }
    
    bool isEmpty() {
        rt(j==-1);
    }
    
    bool isFull() {
        return !isEmpty() && (j+1)%n==i;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
