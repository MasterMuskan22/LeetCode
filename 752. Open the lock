/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        unordered_set<string> st;
        for(auto it:deadends) st.insert(it);
        if(st.find("0000")!=st.end()) rt(-1);
        unordered_set<string> vis;
        vis.insert("0000");
        queue<pair<int,string>> q;
        q.push({0,"0000"});
        int min_steps=1e9;
        while(!q.empty()){
            int n=sz(q);
            while(n--){
                int steps=q.front().first;
                string code=q.front().second;
                q.pop();
                if(code==target) rt(steps);
                for(int i=0;i<sz(code);i++){
                    char org=code[i];
                    if(org=='9') code[i]='0';
                    else code[i]=org+1;
                    if(st.find(code)==st.end() && vis.find(code)==vis.end()){
                        q.push({steps+1,code});
                        vis.insert(code);
                    }
                    if(org=='0') code[i]='9';
                    else code[i]=org-1;
                    if(st.find(code)==st.end() && vis.find(code)==vis.end()){
                        q.push({steps+1,code});
                        vis.insert(code);
                    }
                    code[i]=org;
                }
            }
        }
        rt(-1);
    }
};
