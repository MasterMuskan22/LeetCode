#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
ll SIZE=1e6;
bool sieve[1000001];
void createSieve(){
    rep(i,2,SIZE+1){
        sieve[i]=1;
    }
    for(int i=2;i*i<=SIZE;i++){
        if(sieve[i]==1){
            for(int j=i*i;j<=SIZE;j+=i){
                sieve[j]=0;
            }
        }
    }
}
class Solution {
public:
    int mostFrequentPrime(vector<vector<int>>& mat) {
        createSieve();
        umap mp;
        int m=sz(mat),n=sz(mat[0]);
        rep(i,0,m){
            rep(j,0,n){
                rep(k,0,8){
                    int cur=mat[i][j];
                    int nRow=i+dr1[k];
                    int nCol=j+dc1[k];
                    while(nRow>=0 && nRow<m && nCol>=0 && nCol<n){
                        cur=cur*10+mat[nRow][nCol];
                        if(cur>10 && sieve[cur]) mp[cur]++;
                        nRow+=dr1[k];
                        nCol+=dc1[k];
                    }
                }
            }
        }
        int max_cnt=0;
        for(auto it:mp) max_cnt=max(max_cnt,it.second);
        int res=-1;
        for(auto it:mp){
            if(it.second==max_cnt) res=max(res,it.first);
        }
        rt(res);
    }
};
