/*The ways to success lies in hardwork,consistency,dedication,gratitude and all 
that with a sweet smile on the face.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<pi> adj[n];
        for(auto it:times){
            adj[it[0]-1].push_back({it[1]-1,it[2]});
        }
        vi time(n,1e9);
        time[k-1]=0;
        queue<pair<int,pi>> q;
        q.push({0,{k-1,0}});
        while(!q.empty()){
            int stops=q.front().first;
            int node=q.front().second.first;
            int cost=q.front().second.second;
            q.pop();
            for(auto it:adj[node]){
                int adjNode=it.first;
                int newCost=it.second;
                if(newCost+cost<time[adjNode]){
                    time[adjNode]=newCost+cost;
                    q.push({stops+1,{adjNode,time[adjNode]}});
                }
            }
        }
        int mini=0;
        for(auto it:time){
            if(it==1e9) rt(-1);
            mini=max(mini,it);
        }
        rt(mini);
    }
};
