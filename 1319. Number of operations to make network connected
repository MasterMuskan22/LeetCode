/*The ways to success lies in hardwork,consistency,dedication,gratitude and all 
that with a sweet smile on the face.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class DisJointSet{
    vector<int> rank;
    vector<int> parent;
    vector<int> size;
public:
    DisJointSet(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
            size[i]=i;
        }
    }
    int findUltimateParent(int node){
        if(node==parent[node]) return node;
        return parent[node]=findUltimateParent(parent[node]);
    }
    void unionByRank(int node1,int node2){
        int ultParentNode1=findUltimateParent(node1);
        int ultParentNode2=findUltimateParent(node2);
        if(ultParentNode1==ultParentNode2) return ;
        if(rank[ultParentNode1]>rank[ultParentNode2]){
            parent[ultParentNode2]=ultParentNode1;
        }
        else if(rank[ultParentNode1]<rank[ultParentNode2]){
            parent[ultParentNode1]=ultParentNode2;
        }
        else{
            parent[ultParentNode1]=ultParentNode2;
            rank[ultParentNode1]++;
        }
    }
    void unionBySize(int node1,int node2){
        int ultParentNode1=findUltimateParent(node1);
        int ultParentNode2=findUltimateParent(node2);
        if(ultParentNode1==ultParentNode2) return ;
        if(size[ultParentNode1]>size[ultParentNode2]){
            parent[ultParentNode2]=ultParentNode1;
            size[ultParentNode1]+=size[ultParentNode2];
        }
        else{
            parent[ultParentNode1]=ultParentNode2;
            size[ultParentNode2]+=size[ultParentNode1];
        }
    }
};
class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        DisJointSet ds(n);
        int cnt=0;
        //Connecting all the edges and finding the ultimate parent
        for(auto it:connections){
            if(ds.findUltimateParent(it[0])!=ds.findUltimateParent(it[1])){
                ds.unionBySize(it[0],it[1]);
            }
            else cnt++;
        }
        //cnt means the number of extra edges
        //par means who are the ult par of the compo
        int par=0;
        rep(i,0,n){
            if(ds.findUltimateParent(i)==i) par++;
        }
        cout<<cnt<<" "<<par<<endl;
        if(par-cnt<=1) rt(par-1);
        rt(-1);
    }
};
