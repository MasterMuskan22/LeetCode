/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    bool isPossible(vi &nums,int mid,int k){
        int sum=0;
        int cnt=1;
        for(auto it:nums){
            if(sum+it<=mid) sum+=it;
            else{
                cnt++;
                if(it>mid || cnt>k) rt(0);
                sum=it;
            }
        }
        //cout<<cnt<<" ";
        rt(1);
    }
    int distributeCookies(vector<int>& cookies, int k) {
        srt(cookies);
        int min_unfair=1e9;
        do{
            int start=0;
            int end=accumulate(all(cookies),0);
            int cur_min=0;
            while(start<=end){
                int mid=start+(end-start)/2;
                if(isPossible(cookies,mid,k)){
                    cur_min=mid;
                    end=mid-1;
                }
                else start=mid+1;
            }
            min_unfair=min(min_unfair,cur_min);
        }while(next_permutation(all(cookies)));
        rt(min_unfair);
    }
};
