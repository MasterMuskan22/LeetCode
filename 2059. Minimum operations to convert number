#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int minimumOperations(vector<int>& nums, int start, int goal) {
        int n=sz(nums);
        vi vis(1001,0);
        // vis[start]=1;
        queue<int> q;
        q.push(start);
        int steps=0;
        while(!q.empty()){
            int s=sz(q);
            rep(i,0,s){
                int node=q.front();
                q.pop();
                if(node==goal) rt(steps);
                // if(node>1000) break;
                if(node>=0 && node<=1000 && !vis[node]){
                    vis[node]=1;
                    for(auto it:nums){
                        int a=node+it;
                        int b=node-it;
                        int c=node^it;
                        q.push(a);
                        q.push(b);
                        q.push(c);
                    }
                }
            }
            steps++;
        }
        rt(-1);
    }
};
