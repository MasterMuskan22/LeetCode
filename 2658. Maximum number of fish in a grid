/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int bfs(int i,int j,vii &grid,vii &vis){
        int cnt=grid[i][j];
        vis[i][j]=1;
        rep(k,0,4){
            int nRow=i+dr[k];
            int nCol=j+dc[k];
            if(nRow>=0 && nRow<sz(grid) && nCol>=0 && nCol<sz(grid[0]) && !vis[nRow][nCol] && grid[nRow][nCol]!=0){
                cnt+=bfs(nRow,nCol,grid,vis);
            }
        }
        rt(cnt);
    }
    int findMaxFish(vector<vector<int>>& grid) {
        int max_fish=0;
        vii vis(sz(grid),vi(sz(grid[0]),0)); 
        rep(i,0,sz(grid)){
            rep(j,0,sz(grid[0])){
                if(grid[i][j]!=0 && !vis[i][j]){
                    max_fish=max(max_fish,bfs(i,j,grid,vis));
                }
            }
        }
        rt(max_fish);
    }
};
