/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    bool getCount(int i,vi &nums,int cur,int sum,vi &vis,int k){
        if(k==1) rt(1);
        if(i>=sz(nums)) rt(0);
        if(sum==cur) return getCount(0,nums,0,sum,vis,k-1);
        rep(j,i,sz(nums)){
            if(vis[j]) continue;
            else if(cur+nums[j]>sum) continue;
            vis[j]=1;
            if(getCount(j+1,nums,cur+nums[j],sum,vis,k)==1) rt(1);
            vis[j]=0;
        }
        rt(0);
    }
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        speed;
        ll tot_sum=0;
        for(auto it:nums) tot_sum+=it;
        if(tot_sum%k!=0) rt(0);
        if(sz(nums)<k) rt(0);
        int sum=tot_sum/k;
        vi vis(sz(nums),0);
        return getCount(0,nums,0,sum,vis,k);
    }
};
