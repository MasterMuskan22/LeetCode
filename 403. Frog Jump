/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    bool canJump(int i,int k,vi &arr,vii &dp){
        if(i>=sz(arr)-1) rt(1);
        if(dp[i][k]!=-1) rt(dp[i][k]);
        bool ans=0;
        rep(j,i+1,sz(arr)){
            int diff=arr[j]-arr[i];
            if(diff==k-1) ans|=canJump(j,k-1,arr,dp);
            else if(diff==k) ans|=canJump(j,k,arr,dp);
            else if(diff==k+1) ans|=canJump(j,k+1,arr,dp);
        }
        return dp[i][k]=ans;
    }
    bool canCross(vector<int>& stones) {
        int n=sz(stones);
        // if(stones[1]-stones[0]!=1) rt(0);
        // vii dp(n,vi(10001,-1));
        // dp[0][1]=1;
        // return canJump(1,1,stones,dp);
        vii dp(n+1,vi(n+1,0));
        dp[0][1]=1;
        rep(i,1,n){
            rep(j,0,i){
                int diff=stones[i]-stones[j];
                if(diff>0 && diff<n && dp[j][diff]==1){
                    if(i==n-1) rt(1);
                    dp[i][diff]=1;
                    if(diff-1>=0) dp[i][diff-1]=1;
                    if(diff+1<=n) dp[i][diff+1]=1;
                }
            }
        }
        rt(dp[n][n]);
    }
};
