/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int getMinHP(int i,int j,vii &arr,vii &dp){
        if(i>=sz(arr) || j>=sz(arr[0])) rt(1e9);
        if(i==sz(arr)-1 && j==sz(arr[0])-1){
            if(arr[i][j]>0) rt(1);
            else rt(1-arr[i][j]);
        }
        if(dp[i][j]!=1e9) rt(dp[i][j]);
        int up=0,left=0;
        up=getMinHP(i+1,j,arr,dp);
        left=getMinHP(i,j+1,arr,dp);
        int res=min(up,left)-arr[i][j];
        if(res<=0) return dp[i][j]=1;
        return dp[i][j]=res;
    }
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=sz(dungeon);
        int n=sz(dungeon[0]);
        // vii dp(m,vi(n,1e9));
        // return getMinHP(0,0,dungeon,dp);
        vii dp(m+1,vi(n+1,1e9));
        dp[m-1][n]=1;
        dp[m][n-1]=1;
        for(int i=m-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                int up=0,left=0;
                up=dp[i+1][j];
                left=dp[i][j+1];
                int res=min(up,left)-dungeon[i][j];
                if(res<=0) dp[i][j]=1;
                else dp[i][j]=res;
            }
        }
        rt(dp[0][0]);
    }
};
