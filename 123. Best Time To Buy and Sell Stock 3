/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class Solution {
public:
    int getMaxProfit(int i,vi &prices,int buy,int time,vector<vii> &dp){
        if(i>=sz(prices) || time<0) rt(0);
        if(dp[i][buy][time]!=-1) rt(dp[i][buy][time]);
        int add=0,sell=0;
        if(buy==1) add=max(-prices[i]+getMaxProfit(i+1,prices,0,time,dp),getMaxProfit(i+1,prices,buy,time,dp));
        else sell=max(getMaxProfit(i+1,prices,1,time-1,dp)+prices[i],getMaxProfit(i+1,prices,0,time,dp));
        return dp[i][buy][time]=max(add,sell);
    }
    int maxProfit(vector<int>& prices) {
        int n=sz(prices);
        // vector<vii> dp(n,vii(2,vi(3,-1)));
        // return getMaxProfit(0,prices,1,1,dp);
        vector<vii> dp(n+1,vii(2,vi(3,0)));
        for(int i=n-1;i>=0;i--){
            rep(buy,0,2){
                rep(time,1,3){
                    int add=0,sell=0;
                    if(buy==1) add=max(dp[i+1][0][time]-prices[i],dp[i+1][1][time]);
                    else sell=max(dp[i+1][1][time-1]+prices[i],dp[i+1][0][time]);
                    dp[i][buy][time]=max(add,sell);
                }
            }
        }
        rt(dp[0][1][2]);
    }
};
