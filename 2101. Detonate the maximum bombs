/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    void dfs(int node,vi adj[],vi &vis,int &cur){
        vis[node]=1;
        cur++;
        for(auto it:adj[node]){
            if(!vis[it]){
                dfs(it,adj,vis,cur);
            }
        }
    }
    int maximumDetonation(vector<vector<int>>& bombs) {
        int n=sz(bombs);
        vi adj[n];
        int max_det=0;
        rep(i,0,n){
            int x1=bombs[i][0],y1=bombs[i][1],r1=bombs[i][2];
            rep(j,0,n){
                ll x2=abs(x1-bombs[j][0]),y2=abs(y1-bombs[j][1]),r2=bombs[j][2];
                if(i!=j){
                    ll dist=(x2)*(x2)+(y2)*(y2);
                    if(dist<=(ll)r1*r1){
                        adj[i].push_back(j);
                    }
                }
            }
        }
        rep(i,0,n){
            vi vis(n,0);
            int cur=0;
            dfs(i,adj,vis,cur);
            max_det=max(max_det,cur);
        }
        rt(max_det);
    }
};
