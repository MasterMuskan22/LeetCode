/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int minimumSeconds(vector<int>& nums) {
        //TC = O(N*N) -> roughly N*N as we are traversing through map as well as indexes
        //in map
        //SC = O(N)
        int n=sz(nums);
        //Store the indexes of occurences of all the elements
        unordered_map<int,vi> mp;
        rep(i,0,sz(nums)) mp[nums[i]].pb(i);
        int mini=1e9;
        for(auto it:mp){
            vi v=it.second;
            int num=it.first;
            int firstOccurenceIndex=v[0];
            int lastOccurenceIndex=v[sz(v)-1];
            //Find the first and the last occurence of the element
            //*****EDGE CASE*****: As the array is circular, so we also have to consider the
            //distance between the first and last occurence of the number from behind
            //(circularly).
            int gap=(firstOccurenceIndex-0+n-1-lastOccurenceIndex+1)/2;
            rep(i,1,sz(v)){
                gap=max(gap,(v[i]-v[i-1]-1+1)/2);
            }
            mini=min(mini,gap);
        }
        rt(mini);
    }
};
