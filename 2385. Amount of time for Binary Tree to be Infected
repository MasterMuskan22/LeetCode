/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*The ways to success lies in hardwork,consistency,dedication,gratitude and all 
that with a sweet smile on the face.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class Solution {
public:
    void getPar(TreeNode* &root,int start,unordered_map<TreeNode*,TreeNode*> &mp,TreeNode* &target){
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            auto it=q.front();
            q.pop();
            if(it->val==start) target=it;
            if(it->left){
                mp[it->left]=it;
                q.push(it->left);
            }
            if(it->right){
                mp[it->right]=it;
                q.push(it->right);
            }
        }
    }
    int amountOfTime(TreeNode* root, int start) {
        unordered_map<TreeNode*,TreeNode*> mp;
        TreeNode* target=new TreeNode(0);
        getPar(root,start,mp,target);
        int time=-1;
        queue<TreeNode*> q;
        q.push(target);
        unordered_map<TreeNode*,bool> vis;
        vis[target]=1;
        while(!q.empty()){
            int n=sz(q);
            time++;
            rep(i,0,n){
                auto it=q.front();
                q.pop();
                if(it->left && !vis[it->left]){
                    vis[it->left]=1;
                    q.push(it->left);
                }
                if(it->right && !vis[it->right]){
                    vis[it->right]=1;
                    q.push(it->right);
                }
                if(mp[it] && !vis[mp[it]]){
                    vis[mp[it]]=1;
                    q.push(mp[it]);
                }
            }
        }
        rt(time);
    }
};
