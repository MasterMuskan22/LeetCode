/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class BSTIterator{
    stack<TreeNode*> st;
    bool dir=1;
public:
    BSTIterator(TreeNode* root,bool direction){
        dir=direction;
        pushAll(root);
    }

    int getNext(){
        TreeNode* temp=st.top();
        st.pop();
        if(!dir) pushAll(temp->right);
        else pushAll(temp->left);
        return temp->val;
    }

    bool hasNext(){
        return (!st.empty());
    }

    void pushAll(TreeNode* root){
        for(;root!=NULL;){
            st.push(root);
            if(dir==0) root=root->left;
            else root=root->right;
        }
    }
};
class Solution {
public:
    // void dfs(TreeNode* &root,vi &res){
    //     if(!root) return ;
    //     dfs(root->left,res);
    //     res.pb(root->val);
    //     dfs(root->right,res);
    // }
    bool findTarget(TreeNode* root, int k) {
        //TC = O(N)+O(N)
        //SC = O(N)
        // vi res;
        // dfs(root,res);
        // int i=0,j=sz(res)-1;
        // while(i<j){
        //     if(res[i]+res[j]==k) rt(1);
        //     else if(res[i]+res[j]>k) j--;
        //     else i++;
        // }
        // rt(0);
        
        if(!root) rt(0);
        BSTIterator nxt(root,0);
        BSTIterator prv(root,1);
        int i=nxt.getNext();
        int j=prv.getNext();
        while(i<j){
            if(i+j==k) rt(1);
            else if(i+j<k) i=nxt.getNext();
            else j=prv.getNext();
        }
        rt(0);
    }
};
