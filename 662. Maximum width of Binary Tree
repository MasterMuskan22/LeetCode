/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        // int maxi=0;
        // queue<pair<TreeNode*,ll>> q;
        // q.push({root,0});
        // while(!q.empty()){
        //     int n=sz(q);
        //     ll mini=q.front().second;
        //     int start=0,end=0;
        //     rep(i,0,n){
        //         auto it=q.front();
        //         q.pop();
        //         TreeNode* node=it.first;
        //         ll curVal=it.second-mini;
        //         if(i==0) start=curVal;
        //         else if(i==n-1) end=curVal;
        //         if(node->left) q.push({node->left,curVal*2+1});
        //         if(node->right) q.push({node->right,curVal*2+2});
        //     }
        //     maxi=max(maxi,end-start+1);
        // }
        // rt(maxi);
        ll maxi=0;
        queue<pair<TreeNode*,int>> q;
        q.push({root,1});
        while(!q.empty()){
            ll first=0,last=0;
            int n=sz(q);
            ll mini=q.front().second;
            rep(i,0,n){
                auto it=q.front();
                q.pop();
                if(i==0) first=it.second-mini;
                else if(i==n-1) last=it.second-mini;
                if(it.first->left){
                    q.push({it.first->left,(ll)2*it.second+1});
                }
                if(it.first->right){
                    q.push({it.first->right,(ll)2*it.second+2});
                }
            }
            maxi=max(maxi,last-first+1);
        }
        rt((int)maxi);
    } 
};
