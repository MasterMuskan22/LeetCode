/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* getBST(int start,int end,vector<TreeNode*> &arr){
        if(start>end) return NULL;
        int mid=start+(end-start)/2;
        TreeNode* root=arr[mid];
        root->left=getBST(start,mid-1,arr);
        root->right=getBST(mid+1,end,arr);
        return root;
    }
    void dfs(TreeNode* &root,vector<TreeNode*> &arr){
        if(!root) return ;
        dfs(root->left,arr);
        arr.push_back(root);
        dfs(root->right,arr);
    }
    TreeNode* balanceBST(TreeNode* root) {
        if(!root) return NULL;
        vector<TreeNode*> arr;
        dfs(root,arr);
        return getBST(0,arr.size()-1,arr);
    }
};
