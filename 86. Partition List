/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode* prev=new ListNode();
        ListNode* prevTemp=prev;
        ListNode* next=new ListNode();
        ListNode* nextTemp=next;
        while(head){
            if(head->val<x){
                prevTemp->next=new ListNode(head->val);
                prevTemp=prevTemp->next;
            }
            else{
                nextTemp->next=new ListNode(head->val);
                nextTemp=nextTemp->next;
            }
            head=head->next;
        }
        prevTemp->next=next->next;
        rt(prev->next);
        // vi prev,next;
        // while(head){
        //     if(head->val<x) prev.pb(head->val);
        //     else next.pb(head->val);
        //     head=head->next;
        // }
        // ListNode* res=new ListNode();
        // ListNode* temp=res;
        // for(auto it:prev){
        //     temp->next=new ListNode(it);
        //     temp=temp->next;
        // }
        // for(auto it:next){
        //     temp->next=new ListNode(it);
        //     temp=temp->next;
        // }
        // rt(res->next);
    }
};
