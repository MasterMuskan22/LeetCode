#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int maximumSetSize(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> st,st1,st2;
        for(auto it:nums1) st1.insert(it);
        for(auto it:nums2) st2.insert(it);
        int cnt1=0,cnt2=0,n=sz(nums1);
        for(auto it:st1){
            if(cnt1==n/2) break;
            if(st2.find(it)==st2.end()){
                cnt1++;
                st.insert(it);
            }
        }
        for(auto it:st2){
            if(cnt2==n/2) break;
            if(st1.find(it)==st1.end()){
                cnt2++;
                st.insert(it);
            }
        }
        if(cnt1<n/2){
            for(auto it:st1){
                if(cnt1==n/2) break;
                if(st2.find(it)!=st2.end()){
                    st.insert(it);
                    st2.erase(it);
                    cnt1++;
                }
            }
        }
        if(cnt2<n/2){
            for(auto it:st2){
                if(cnt2==n/2) break;
                if(st1.find(it)!=st1.end()){
                    st.insert(it);
                    st1.insert(it);
                    cnt2++;
                }
            }
        }
        rt(sz(st));
    }
};
