/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    // bool getAns(int i,string &s,string &t,vi &dp){
    //     if(i>=sz(s)) rt(0);
    //     if(dp[i]!=-1) rt(dp[i]);
    //     rep(j,i+1,sz(s)){
    //         if((j-i)%2==0){
    //             swap
    //         }
    //     }
    // }
    bool checkStrings(string s1, string s2) {
        int n=sz(s1);
        // vi dp(n,-1);
        // return getAns(0,s1,s2,dp);
        // if(s1==s2) rt(1);
        // rep(i,2,n){
        //     swap(s1[i],s1[i-2]);
        //     if(s1==s2) rt(1);
        //     swap(s1[i],s1[i-2]);
        // }
        // rep(i,2,n){
        //     swap(s1[i],s1[i-2]);
        //     if(s1==s2) rt(1);
        // }
        // rt(0);
        vc even1,odd1,even2,odd2;
        rep(i,0,n){
            if(i&1) odd1.pb(s1[i]);
            else even1.pb(s1[i]);
        }
        rep(i,0,n){
            if(i&1) odd2.pb(s2[i]);
            else even2.pb(s2[i]);
        }
        srt(odd1);
        srt(odd2);
        srt(even1);
        srt(even2);
        if(odd1==odd2 && even1==even2) rt(1);
        rt(0);
    }
};
