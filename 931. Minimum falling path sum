/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int getMinSum(int i,int j,vii &matrix,vii &dp){
        if(i==0 && j>=0 && j<sz(matrix[0])) rt(dp[i][j]=matrix[i][j]);
        if(j<0 || j>=sz(matrix[0])) rt(1e9);
        if(dp[i][j]!=1e9) rt(dp[i][j]);
        int up=matrix[i][j]+getMinSum(i-1,j,matrix,dp);
        int left=matrix[i][j]+getMinSum(i-1,j-1,matrix,dp);
        int right=matrix[i][j]+getMinSum(i-1,j+1,matrix,dp);
        return dp[i][j]=min({up,left,right});
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m=sz(matrix);
        int n=sz(matrix[0]);
        int min_sum=1e9;
        // vii dp(m,vi(n,1e9));
        // rep(j,0,n){
        //     min_sum=min(min_sum,getMinSum(m-1,j,matrix,dp));
        // }
        // vii dp(m,vi(n,0));
        // rep(j,0,n) dp[0][j]=matrix[0][j];
        // rep(i,1,m){
        //     rep(j,0,n){
        //         if(j==0) dp[i][j]=matrix[i][j]+min(dp[i-1][j],dp[i-1][j+1]);
        //         else if(j==n-1) dp[i][j]=matrix[i][j]+min(dp[i-1][j],dp[i-1][j-1]);
        //         else dp[i][j]=matrix[i][j]+min({dp[i-1][j-1],dp[i-1][j],dp[i-1][j+1]});
        //     }
        // }
        // rep(j,0,n) min_sum=min(min_sum,dp[m-1][j]);
        // rt(min_sum);
        vi prev(n,0);
        vi cur(n,0);
        rep(j,0,n) prev[j]=matrix[0][j];
        rep(i,1,m){
            rep(j,0,n){
                if(j==0) cur[j]=matrix[i][j]+min(prev[j],prev[j+1]);
                else if(j==n-1) cur[j]=matrix[i][j]+min(prev[j],prev[j-1]);
                else cur[j]=matrix[i][j]+min({prev[j],prev[j-1],prev[j+1]});
            }
            prev=cur;
        }
        rep(j,0,n) min_sum=min(min_sum,prev[j]);
        rt(min_sum);
    }
};
