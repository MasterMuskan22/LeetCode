/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int getMinCount(int i,string &s,unordered_map<string,bool> &mp,vi &dp){
        if(i>=sz(s)) rt(0);
        if(dp[i]!=-1) rt(dp[i]);
        int min_extra=1e9;
        string temp="";
        rep(j,i,sz(s)){
            temp+=s[j];
            int cur_extra=0,next_extra=0;
            if(mp[temp]==0) cur_extra=sz(temp);
            next_extra=getMinCount(j+1,s,mp,dp);
            min_extra=min(min_extra,cur_extra+next_extra); 
        }
        rt(dp[i]=min_extra);
    }
    int minExtraChar(string s, vector<string>& dictionary) {
        unordered_map<string,bool> mp;
        for(auto it:dictionary) mp[it]=1;
        // vi dp(sz(s),-1);
        // return getMinCount(0,s,mp,dp);
        vi dp(sz(s)+1,0);
        for(int i=sz(s)-1;i>=0;i--){
            int min_extra=1e9;
            string temp="";
            rep(j,i,sz(s)){
                temp+=s[j];
                int cur_extra=0,next_extra=0;
                if(mp[temp]==0) cur_extra=sz(temp);
                next_extra=dp[j+1];
                min_extra=min(min_extra,cur_extra+next_extra);
            }
            dp[i]=min_extra;
        }
        rt(dp[0]);
    }
};
