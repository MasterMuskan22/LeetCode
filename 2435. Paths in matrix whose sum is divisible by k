#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int getNumPaths(int i,int j,vii &grid,int sum,int k,vector<vii> &dp){
        if(i>=sz(grid) || j>=sz(grid[0])) rt(0);
        if(i==sz(grid)-1 && j==sz(grid[0])-1){
            if((sum+grid[i][j])%k==0) rt(1);
            else rt(0);
        }
        if(dp[i][j][sum]!=-1) rt(dp[i][j][sum]%mod);
        int down=getNumPaths(i,j+1,grid,(sum+grid[i][j])%k,k,dp);
        int right=getNumPaths(i+1,j,grid,(sum+grid[i][j])%k,k,dp);
        return dp[i][j][sum]=(down+right)%mod;
    }
    int numberOfPaths(vector<vector<int>>& grid, int k) {
        int m=sz(grid);
        int n=sz(grid[0]);
        vector<vii> dp(m,vii(n,vi(k,-1)));
        return getNumPaths(0,0,grid,0,k,dp)%mod;
    }
};
