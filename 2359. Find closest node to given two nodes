/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    void bfs(int node,vi adj[],vi &dist){
        queue<int> q;
        q.push(node);
        dist[node]=0;
        while(!q.empty()){
            int n=q.front();
            q.pop();
            for(auto it:adj[n]){
                if(dist[it]>1+dist[n]){
                    dist[it]=1+dist[n];
                    q.push(it);
                }
            }
        }
    }
    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n=sz(edges);
        vi adj[n];
        rep(i,0,n){
            if(edges[i]!=-1) adj[i].pb(edges[i]);
        }
        vi dist1(n,1e9);
        vi dist2(n,1e9);
        bfs(node1,adj,dist1);
        bfs(node2,adj,dist2);
        int min_dist=1e9;
        int res=-1;
        rep(i,0,n){
            if(min_dist>max(dist1[i],dist2[i])){
                min_dist=max(dist1[i],dist2[i]);
                res=i;
            }
        }
        rt(res);
    }
};
