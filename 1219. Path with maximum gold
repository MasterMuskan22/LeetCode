/*Success is achieved by perseverance, devotion, thankfulness, and 
hard workâ€”all while wearing a charming grin.*/
#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    int dfs(int r,int c,vii &grid){
        int res=0;
        if(r<0 || c<0 || r>=sz(grid) || c>=sz(grid[0]) || grid[r][c]==0) return 0;
        int add=grid[r][c];
        grid[r][c]=0;
        res=max(res,dfs(r-1,c,grid));
        res=max(res,dfs(r,c+1,grid));
        res=max(res,dfs(r+1,c,grid));
        res=max(res,dfs(r,c-1,grid));
        grid[r][c]=add;
        rt(res+add);
    }
    int getMaximumGold(vector<vector<int>>& grid) {
        int max_gold=0;
        int m=sz(grid);
        int n=sz(grid[0]);
        rep(i,0,m){
            rep(j,0,n){
                if(grid[i][j]>0){
                    max_gold=max(max_gold,dfs(i,j,grid));
                }
            }
        }
        rt(max_gold);
    }
};
