#define ll long long
#define lli long long int
#define vi vector<int>
#define vll vector<ll>
#define vii vector<vector<int>>
#define vlll vector<vector<ll>>
#define vs vector<string> 
#define vss vector<vector<string>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define pb(x) push_back(x)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define srt(v) sort(begin(v),end(v));
#define srtr(v) sort(rbegin(v),rend(v))
#define rev(v) reverse(begin(v),end(v))
#define all(v) (v).begin(),(v).end()
#define pi pair<int,int>
#define pll pair<ll,ll>
#define umap unordered_map<int,int>
#define umapl unordered_map<ll,ll>
#define rt(v) return v
#define sz(v) size(v)
#define mpdebug(mp) for(auto it:mp){cout<<it.first<<" "<<it.second<<endl;}
#define debug(v) for(auto it:v) cout<<it<<" ";
int dr[4]={-1,0,1,0};
int dc[4]={0,1,0,-1};
int dr1[8]={-1,-1,0,1,1,1,0,-1};
int dc1[8]={0,1,1,1,0,-1,-1,-1};
int mod=1e9+7;
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
class Solution {
public:
    ll getNumSubs(int i,vi &nums,ll diff,vector<unordered_map<ll,ll>> &dp){
        if(i>=sz(nums)){
            rt(0);
        }
        if(dp[i].find(diff)!=dp[i].end()) rt(dp[i][diff]);
        ll take=0;
        rep(k,i+1,sz(nums)){
            if((ll)((ll)nums[k]-(ll)nums[i])==(ll)diff) take=1+take+getNumSubs(k,nums,diff,dp);
        }
        rt(dp[i][diff]=take);
    }
    int numberOfArithmeticSlices(vector<int>& nums) {
        int n=sz(nums);
        int res=0;
        vector<unordered_map<ll,ll>> dp(n);
        rep(i,0,n){
            rep(j,i+1,n){
                ll diff=(ll)nums[j]-(ll)nums[i];
                res+=getNumSubs(j,nums,diff,dp);
            }
        }
        rt(res);
    }
};
